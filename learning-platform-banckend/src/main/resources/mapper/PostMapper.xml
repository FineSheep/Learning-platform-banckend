<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fun.haoyang666.www.mapper.PostMapper">

    <resultMap id="BaseResultMap" type="fun.haoyang666.www.domain.entity.Post">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="description" column="description" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="photo" column="photo" jdbcType="VARCHAR"/>
        <result property="reviewStatus" column="reviewStatus" jdbcType="INTEGER"/>
        <result property="reviewMessage" column="reviewMessage" jdbcType="VARCHAR"/>
        <result property="collectNum" column="collectNum" jdbcType="INTEGER"/>
        <result property="commentNum" column="commentNum" jdbcType="INTEGER"/>
        <result property="thumbNum" column="thumbNum" jdbcType="INTEGER"/>
        <result property="userId" column="userId" jdbcType="BIGINT"/>
        <result property="tags" column="tags" jdbcType="VARCHAR"/>
        <result property="createTime" column="createTime" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="updateTime" jdbcType="TIMESTAMP"/>
        <result property="isDelete" column="isDelete" jdbcType="TINYINT"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="postMap" type="fun.haoyang666.www.domain.vo.PostVO">
        <id property="id" column="id"/>
        <result property="description" column="description" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="photo" column="photo" jdbcType="VARCHAR"/>
        <result property="reviewStatus" column="reviewStatus" jdbcType="INTEGER"/>
        <result property="reviewMessage" column="reviewMessage" jdbcType="VARCHAR"/>
        <result property="collectNum" column="collectNum" jdbcType="INTEGER"/>
        <result property="commentNum" column="commentNum" jdbcType="INTEGER"/>
        <result property="thumbNum" column="thumbNum" jdbcType="INTEGER"/>
        <result property="tags" column="tags" jdbcType="VARCHAR"/>
        <result property="createTime" column="createTime" jdbcType="TIMESTAMP"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <association property="user">
            <id property="id" column="userId"/>
            <result property="avatarUrl" column="avatarUrl"/>
        </association>
    </resultMap>
    <sql id="Base_Column_List">
        id
        ,description,content,
        photo,reviewStatus,reviewMessage,
        collectNum,commentNum,thumbNum,
        userId,tags,createTime,updateTime,
        isDelete,title
    </sql>
    <select id="selectPosts" resultMap="postMap">
        select post.id,
               description,
               content,
               photo,
               reviewStatus,
               reviewMessage,
               collectNum,
               commentNum,
               thumbNum,
               tags,
               post.createTime,
               title,
               `user`.id as userId,
               `user`.avatarUrl
        from post,
             `user`
        where post.userId = `user`.id
          and post.isDelete = 0
          and reviewStatus = 1
        order by post.createTime desc
            limit #{offset}, #{pageSize};
    </select>

    <update id="downThumb">
        update post
        set thumbNum = thumbNum - 1
        where id = #{postId};
    </update>

    <update id="upThumb">
        update post
        set thumbNum = thumbNum + 1
        where id = #{postId};
    </update>

    <update id="upCollect">
        update post
        set collectNum = collectNum + 1
        where id = #{postId};
    </update>

    <update id="downCollect">
        update post
        set collectNum = collectNum - 1
        where id = #{postId};
    </update>
    <update id="updatePostComment">
        update post
        set commentNum = commentNum + 1
        where id = #{postId};
    </update>


    <select id="selectPostsUid" resultMap="postMap">
        select post.id,
               description,
               content,
               photo,
               reviewStatus,
               reviewMessage,
               collectNum,
               commentNum,
               thumbNum,
               tags,
               post.createTime,
               title,
               `user`.id as userId,
               `user`.avatarUrl
        from post,
             `user`
        where post.userId = `user`.id
          and post.isDelete = 0
          and post.userId = #{uid}
        order by post.createTime desc
            limit #{offset}, #{pageSize};
    </select>
    <select id="selectPostThumb" resultMap="postMap">
        select post.id,
               description,
               content,
               photo,
               reviewStatus,
               reviewMessage,
               collectNum,
               commentNum,
               thumbNum,
               tags,
               post.createTime,
               title,
               `user`.id as userId,
               `user`.avatarUrl
        from post,
             `user`
        where post.userId = `user`.id
          and post.isDelete = 0
          and post.id in (
            select postId
            from thumb_post
            where userId = #{userId}
        )
        order by post.createTime desc
            limit #{offset}, #{pageSize};
    </select>
    <select id="selectPostCollect" resultMap="postMap">
        select post.id,
               description,
               content,
               photo,
               reviewStatus,
               reviewMessage,
               collectNum,
               commentNum,
               thumbNum,
               tags,
               post.createTime,
               title,
               `user`.id as userId,
               `user`.avatarUrl
        from post,
             `user`
        where post.userId = `user`.id
          and post.isDelete = 0
          and post.id in (
            select postId
            from collect_post
            where userId = #{userId}
        )
        order by post.createTime desc
            limit #{offset}, #{pageSize};
    </select>
    <select id="getPostActions" resultMap="postMap" parameterType="fun.haoyang666.www.domain.req.GetPostActionsREQ">
        select post.id,
        description,
        content,
        photo,
        reviewStatus,
        reviewMessage,
        collectNum,
        commentNum,
        thumbNum,
        tags,
        post.createTime,
        title,
        `user`.id as userId,
        `user`.avatarUrl
        from post,
        `user`
        <where>
            post.userId = `user`.id and post.isDelete = 0 and userId=#{userId}
            <if test="startTime!=null">
                and post.createTime &gt;=#{startTime}
            </if>
            <if test="endTime!=null">
                and post.createTime &gt;=#{endTime}
            </if>
        </where>
        order by post.createTime desc
        limit #{offset}, #{pageSize};
    </select>
</mapper>
